---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bgImage,
  bg = await Astro.slots.render('bg'),
  headerData,
} = Astro.props;
---

<section class="relative not-prose overflow-hidden header-hero min-h-screen" {...id ? { id } : {}}>
  <div
    class="absolute inset-0 pointer-events-none bg-cover bg-center bg-no-repeat bg_cover"
    aria-hidden="true"
    style={bgImage ? `background-image: url('${bgImage}')` : undefined}
  >
    <!-- Gradiente con color e5e7eb -->
    <div class="absolute inset-0 bg-gradient-to-b from-gray-200/95 via-gray-200/90 to-gray-200/75"></div>
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>

  <!-- Wave shape at bottom -->
  <div class="absolute bottom-0 left-0 w-full overflow-hidden leading-none">
    <svg
      class="relative block w-full h-24 sm:h-32 md:h-40 lg:h-48"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 1200 120"
      preserveAspectRatio="none"
    >
      <path d="M0,80 Q300,40 600,60 Q900,80 1200,80 L1200,120 L0,120 Z" class="fill-current text-white"></path>
    </svg>
  </div>

  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-full flex items-center">
    <div class="w-full py-12 sm:py-16 md:py-20 lg:py-24 xl:py-32">
      <div class="text-center pb-8 sm:pb-10 md:pb-12 lg:pb-16 max-w-5xl mx-auto relative z-[5]">
        {
          tagline && (
            <p
              class="text-sm sm:text-base text-gray-500 font-bold tracking-wide uppercase intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade mb-2 sm:mb-4"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-bold leading-tight sm:leading-tighter tracking-tight sm:tracking-tighter mb-4 sm:mb-6 font-heading text-gray-900 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade px-2 sm:px-0"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto px-2 sm:px-0">
          {
            subtitle && (
              <p
                class="text-base sm:text-lg md:text-xl text-gray-700 mb-6 sm:mb-8 leading-relaxed intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
                set:html={subtitle}
              />
            )
          }
          {
            actions && (
              <div class="max-w-xs sm:max-w-md lg:max-w-lg m-auto flex flex-col sm:flex-row sm:justify-center gap-3 sm:gap-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade mt-2">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:w-auto sm:mb-0 shadow-lg text-sm sm:text-base px-6 sm:px-8 py-3 sm:py-4" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      <div
        class="intersect-once intercept-no-queue intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade relative z-[5] mt-6 sm:mt-8 lg:mt-12"
      >
        {
          image && (
            <div class="relative m-auto max-w-5xl px-2 sm:px-0">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="mx-auto rounded-lg sm:rounded-xl shadow-xl w-full"
                  widths={[320, 640, 768, 1024, 1280, 2040]}
                  sizes="(max-width: 639px) 320px, (max-width: 767px) 640px, (max-width: 1023px) 768px, (max-width: 1279px) 1024px, (max-width: 2039px) 1280px, 2040px"
                  loading="eager"
                  width={1024}
                  height={576}
                  {...image}
                />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>

  <style>
    .header-hero {
      position: relative;
      z-index: 1;
    }
    .bg_cover {
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
    }
  </style>
</section>

<style>
  .header-hero {
    min-height: 100vh;
    position: relative;
  }

  /* Altura más compacta en móviles */
  @media (max-width: 639px) {
    .header-hero {
      min-height: 80vh;
    }
  }

  /* Altura media en tablets */
  @media (min-width: 640px) and (max-width: 1023px) {
    .header-hero {
      min-height: 90vh;
    }
  }

  /* Altura completa en desktop */
  @media (min-width: 1024px) {
    .header-hero {
      min-height: 100vh;
    }
  }

  .bg_cover {
    background-position: center center;
    background-size: cover;
    background-repeat: no-repeat;
    background-attachment: fixed;
    width: 100%;
    height: 100%;
  }

  /* Mejora para dispositivos móviles - evita problemas con background-attachment: fixed */
  @media (max-width: 767px) {
    .bg_cover {
      background-attachment: scroll;
    }
  }
</style>
