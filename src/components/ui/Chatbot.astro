---
import { Icon } from 'astro-icon/components';

// Variables de entorno con valores por defecto
const BACKEND_URL = import.meta.env.PUBLIC_CHATBOT_BACKEND_URL || 'http://localhost:3001';
const CHATBOT_TITLE = import.meta.env.PUBLIC_CHATBOT_TITLE || 'Asistente Trakos';
const CHATBOT_PLACEHOLDER = import.meta.env.PUBLIC_CHATBOT_PLACEHOLDER || 'Pregúntame sobre Trakos...';
const MAX_MESSAGE_LENGTH = parseInt(import.meta.env.PUBLIC_CHATBOT_MAX_LENGTH || '500');
const HEALTH_CHECK_INTERVAL = parseInt(import.meta.env.PUBLIC_CHATBOT_HEALTH_INTERVAL || '30000');

export interface Props {
  className?: string;
}

const { className = '' } = Astro.props;
---

<div class={`chatbot-container ${className}`}>
  <!-- Botón flotante -->
  <button
    id="chatbot-toggle"
    class="fixed bottom-6 right-6 z-50 w-14 h-14 bg-blue-600 hover:bg-blue-700 text-white rounded-full shadow-lg transition-all duration-300 flex items-center justify-center group"
    aria-label="Abrir chat"
  >
    <Icon name="tabler:message-circle" class="w-6 h-6 transition-transform group-hover:scale-110" />
    <div id="chat-notification" class="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full animate-pulse hidden">
    </div>
  </button>

  <!-- Ventana del chat -->
  <div
    id="chatbot-window"
    class="fixed bottom-28 right-6 z-40 w-80 h-96 bg-white dark:bg-slate-900 rounded-xl shadow-2xl border border-gray-200 dark:border-gray-700 transform translate-y-full opacity-0 transition-all duration-300 hidden"
  >
    <!-- Header -->
    <div
      class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-t-xl"
    >
      <div class="flex items-center space-x-2">
        <div class="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
          <Icon name="tabler:robot" class="w-5 h-5" />
        </div>
        <div>
          <h3 class="font-semibold text-sm">{CHATBOT_TITLE}</h3>
          <p class="text-xs text-blue-100" id="chat-status">Conectando...</p>
        </div>
      </div>
      <button id="chatbot-close" class="hover:bg-white/20 rounded-full p-1 transition-colors" aria-label="Cerrar chat">
        <Icon name="tabler:x" class="w-4 h-4" />
      </button>
    </div>

    <!-- Área de mensajes -->
    <div id="chatbot-messages" class="flex-1 p-4 overflow-y-auto h-64 space-y-3">
      <!-- Mensaje de bienvenida -->
      <div class="flex items-start space-x-2 animate-fade-in">
        <div
          class="w-8 h-8 bg-gradient-to-br from-blue-600 to-blue-700 rounded-full flex items-center justify-center flex-shrink-0"
        >
          <Icon name="tabler:robot" class="w-4 h-4 text-white" />
        </div>
        <div class="bg-gray-100 dark:bg-slate-800 rounded-lg p-3 max-w-xs">
          <p class="text-sm text-gray-800 dark:text-gray-200">
            ¡Hola! Soy el asistente virtual de Trakos. Puedo ayudarte con información sobre nuestra plataforma, precios,
            industrias compatibles y más. ¿En qué puedo ayudarte?
          </p>
        </div>
      </div>
    </div>

    <!-- Indicador de escritura -->
    <div id="typing-indicator" class="hidden px-4 py-2">
      <div class="flex items-start space-x-2">
        <div
          class="w-8 h-8 bg-gradient-to-br from-blue-600 to-blue-700 rounded-full flex items-center justify-center flex-shrink-0"
        >
          <Icon name="tabler:robot" class="w-4 h-4 text-white" />
        </div>
        <div class="bg-gray-100 dark:bg-slate-800 rounded-lg p-3">
          <div class="flex space-x-1">
            <div class="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
            <div class="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
            <div class="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Input de mensaje -->
    <div class="bg-gray-50 dark:bg-slate-800/50 border-t border-gray-200 dark:border-gray-700">
      <div class="p-4">
        <div class="flex space-x-2">
          <input
            type="text"
            id="chatbot-input"
            placeholder={CHATBOT_PLACEHOLDER}
            class="flex-1 py-2 px-3 text-sm rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all shadow-sm"
            maxlength={MAX_MESSAGE_LENGTH}
          />
          <button
            id="chatbot-send"
            class="bg-blue-600 hover:bg-blue-700 text-white p-2 rounded-lg transition-all flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed min-w-[40px] shadow-sm"
            aria-label="Enviar mensaje"
          >
            <Icon name="tabler:send" class="w-4 h-4" />
          </button>
        </div>
      </div>

      <!-- Footer con información -->
      <div
        class="px-4 pb-3 pt-1 bg-gradient-to-r from-gray-100 to-gray-50 dark:from-slate-800 dark:to-slate-700 border-t border-gray-200/50 dark:border-gray-600/50"
      >
        <div class="flex items-center justify-between text-xs">
          <div class="flex items-center space-x-1 text-gray-600 dark:text-gray-300">
            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 24 24">
              <path
                d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
              ></path>
            </svg>
            <span class="font-medium">Powered by Trakos AI</span>
          </div>
          <div class="text-gray-500 dark:text-gray-400">
            <span id="message-count">0</span>/{MAX_MESSAGE_LENGTH} caracteres
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script
  define:vars={{
    BACKEND_URL,
    MAX_MESSAGE_LENGTH,
    HEALTH_CHECK_INTERVAL,
  }}
>
  class TrakosChat {
    constructor() {
      this.config = {
        backendUrl: BACKEND_URL,
        maxLength: MAX_MESSAGE_LENGTH,
        healthCheckInterval: HEALTH_CHECK_INTERVAL,
      };

      this.state = {
        isOpen: false,
        sessionId: this.generateSessionId(),
        messageCount: 0,
        isConnected: false,
      };

      this.elements = {};
      this.healthCheckTimer = null;

      this.init();
    }

    generateSessionId() {
      return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    init() {
      this.cacheElements();
      this.bindEvents();
      this.checkBackendHealth();
      this.startHealthCheck();
    }

    cacheElements() {
      this.elements = {
        toggle: document.getElementById('chatbot-toggle'),
        window: document.getElementById('chatbot-window'),
        close: document.getElementById('chatbot-close'),
        input: document.getElementById('chatbot-input'),
        send: document.getElementById('chatbot-send'),
        messages: document.getElementById('chatbot-messages'),
        status: document.getElementById('chat-status'),
        notification: document.getElementById('chat-notification'),
        typingIndicator: document.getElementById('typing-indicator'),
        messageCount: document.getElementById('message-count'),
      };
    }

    bindEvents() {
      this.elements.toggle?.addEventListener('click', () => this.toggleChat());
      this.elements.close?.addEventListener('click', () => this.closeChat());
      this.elements.send?.addEventListener('click', () => this.sendMessage());

      this.elements.input?.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          this.sendMessage();
        }
      });

      this.elements.input?.addEventListener('input', (e) => {
        this.updateCharacterCount(e.target.value.length);
      });
    }

    startHealthCheck() {
      this.healthCheckTimer = setInterval(() => {
        this.checkBackendHealth();
      }, this.config.healthCheckInterval);
    }

    async checkBackendHealth() {
      try {
        const response = await fetch(`${this.config.backendUrl}/api/health`, {
          method: 'GET',
          signal: AbortSignal.timeout(5000), // 5 segundos timeout
        });

        if (response.ok) {
          this.updateConnectionStatus(true, 'En línea');
        } else {
          throw new Error(`HTTP ${response.status}`);
        }
      } catch (error) {
        this.updateConnectionStatus(false, 'Desconectado');
        console.warn('Backend health check failed:', error.message);
      }
    }

    updateConnectionStatus(isConnected, statusText) {
      this.state.isConnected = isConnected;

      if (this.elements.status) {
        this.elements.status.textContent = statusText;
        this.elements.status.className = `text-xs ${isConnected ? 'text-green-200' : 'text-red-200'}`;
      }
    }

    updateCharacterCount(count) {
      if (this.elements.messageCount) {
        this.elements.messageCount.textContent = count;
        this.elements.messageCount.style.color = count > this.config.maxLength * 0.9 ? '#ef4444' : '';
      }
    }

    toggleChat() {
      this.state.isOpen ? this.closeChat() : this.openChat();
    }

    openChat() {
      if (!this.elements.window) return;

      this.elements.window.classList.remove('hidden');
      this.elements.notification?.classList.add('hidden');

      // Mover el botón hacia abajo cuando el chat está abierto
      if (this.elements.toggle) {
        this.elements.toggle.classList.add('translate-y-2');
      }

      requestAnimationFrame(() => {
        this.elements.window.classList.remove('translate-y-full', 'opacity-0');
        this.elements.window.classList.add('translate-y-0', 'opacity-100');
        this.elements.input?.focus();
      });

      this.state.isOpen = true;
    }

    closeChat() {
      if (!this.elements.window) return;

      this.elements.window.classList.remove('translate-y-0', 'opacity-100');
      this.elements.window.classList.add('translate-y-full', 'opacity-0');

      // Restaurar posición original del botón
      if (this.elements.toggle) {
        this.elements.toggle.classList.remove('translate-y-2');
      }

      setTimeout(() => {
        this.elements.window.classList.add('hidden');
      }, 300);

      this.state.isOpen = false;
    }

    async sendMessage() {
      const message = this.elements.input?.value?.trim();
      if (!message || !this.state.isConnected) return;

      this.addMessage(message, 'user');
      this.elements.input.value = '';
      this.updateCharacterCount(0);
      this.setInputState(false);
      this.showTypingIndicator();

      try {
        const response = await this.callAPI(message);
        this.addMessage(response, 'bot');
        this.state.messageCount++;
      } catch (error) {
        console.error('API Error:', error);
        this.addMessage(
          'Lo siento, hay un problema temporal con el servicio. Por favor, inténtalo de nuevo.',
          'bot',
          true
        );
      } finally {
        this.hideTypingIndicator();
        this.setInputState(true);
        this.elements.input?.focus();
      }
    }

    async callAPI(message) {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30s timeout

      try {
        const response = await fetch(`${this.config.backendUrl}/api/chat`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            message,
            sessionId: this.state.sessionId,
          }),
          signal: controller.signal,
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        return data.response || data.message || 'Respuesta recibida';
      } catch (error) {
        clearTimeout(timeoutId);
        throw error;
      }
    }

    setInputState(enabled) {
      if (this.elements.input) this.elements.input.disabled = !enabled;
      if (this.elements.send) this.elements.send.disabled = !enabled;
    }

    showTypingIndicator() {
      this.elements.typingIndicator?.classList.remove('hidden');
      this.scrollToBottom();
    }

    hideTypingIndicator() {
      this.elements.typingIndicator?.classList.add('hidden');
    }

    addMessage(text, sender, isError = false) {
      if (!this.elements.messages) return;

      const messageDiv = document.createElement('div');
      messageDiv.className = 'flex items-start space-x-2 animate-fade-in';

      const timestamp = new Date().toLocaleTimeString('es-ES', {
        hour: '2-digit',
        minute: '2-digit',
      });

      messageDiv.innerHTML =
        sender === 'user' ? this.createUserMessage(text, timestamp) : this.createBotMessage(text, timestamp, isError);

      this.elements.messages.appendChild(messageDiv);
      this.scrollToBottom();
    }

    createUserMessage(text, timestamp) {
      return `
        <div class="flex-1"></div>
        <div class="bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg p-3 max-w-xs shadow-md">
          <p class="text-sm">${this.escapeHtml(text)}</p>
          <p class="text-xs text-blue-100 mt-1">${timestamp}</p>
        </div>
        <div class="w-8 h-8 bg-gradient-to-br from-gray-300 to-gray-400 dark:from-gray-600 dark:to-gray-700 rounded-full flex items-center justify-center flex-shrink-0">
          <svg class="w-4 h-4 text-gray-600 dark:text-gray-300" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
          </svg>
        </div>
      `;
    }

    createBotMessage(text, timestamp, isError) {
      const bgClass = isError ? 'bg-red-100 dark:bg-red-900/30' : 'bg-gray-100 dark:bg-slate-800';
      const textClass = isError ? 'text-red-800 dark:text-red-200' : 'text-gray-800 dark:text-gray-200';

      return `
        <div class="w-8 h-8 bg-gradient-to-br from-blue-600 to-blue-700 rounded-full flex items-center justify-center flex-shrink-0">
          <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
          </svg>
        </div>
        <div class="${bgClass} rounded-lg p-3 max-w-xs shadow-sm">
          <p class="text-sm ${textClass}">${this.formatBotMessage(text)}</p>
          <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">${timestamp}</p>
        </div>
      `;
    }

    formatBotMessage(text) {
      return this.escapeHtml(text)
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/\n/g, '<br>');
    }

    scrollToBottom() {
      if (this.elements.messages) {
        this.elements.messages.scrollTop = this.elements.messages.scrollHeight;
      }
    }

    escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    destroy() {
      if (this.healthCheckTimer) {
        clearInterval(this.healthCheckTimer);
      }
    }
  }

  // Inicializar chatbot
  let chatInstance;

  document.addEventListener('DOMContentLoaded', () => {
    chatInstance = new TrakosChat();
  });

  // Cleanup al salir
  window.addEventListener('beforeunload', () => {
    chatInstance?.destroy();
  });
</script>

<style>
  .chatbot-container {
    font-family: var(--aw-font-sans, ui-sans-serif);
  }

  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fade-in 0.3s ease-out;
  }

  #chatbot-messages::-webkit-scrollbar {
    width: 4px;
  }

  #chatbot-messages::-webkit-scrollbar-track {
    background: transparent;
  }

  #chatbot-messages::-webkit-scrollbar-thumb {
    background: #cbd5e0;
    border-radius: 2px;
  }

  .dark #chatbot-messages::-webkit-scrollbar-thumb {
    background: #4a5568;
  }

  #chatbot-toggle:hover {
    transform: scale(1.05);
  }

  .shadow-2xl {
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }
</style>
