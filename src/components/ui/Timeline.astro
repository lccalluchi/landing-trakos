---
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import type { Item } from '~/types';

export interface Props {
  items?: Array<Item>;
  defaultIcon?: string;
  classes?: Record<string, string>;
}

const { items = [], classes = {}, defaultIcon } = Astro.props as Props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = '',
} = classes;

// Esquemas de colores dinámicos tomados de AppShowcase.astro
const colorSchemes = [
  {
    bg: 'from-blue-50 to-blue-100',
    border: 'border-blue-200',
    icon: 'from-blue-500 to-blue-600',
    text: 'text-blue-600',
    number: 'text-blue-700',
    line: 'from-blue-400 to-blue-500',
  },
  {
    bg: 'from-emerald-50 to-emerald-100',
    border: 'border-emerald-200',
    icon: 'from-emerald-500 to-emerald-600',
    text: 'text-emerald-600',
    number: 'text-emerald-700',
    line: 'from-emerald-400 to-emerald-500',
  },
  {
    bg: 'from-purple-50 to-purple-100',
    border: 'border-purple-200',
    icon: 'from-purple-500 to-purple-600',
    text: 'text-purple-600',
    number: 'text-purple-700',
    line: 'from-purple-400 to-purple-500',
  },
  {
    bg: 'from-orange-50 to-orange-100',
    border: 'border-orange-200',
    icon: 'from-orange-500 to-orange-600',
    text: 'text-orange-600',
    number: 'text-orange-700',
    line: 'from-orange-400 to-orange-500',
  },
];
---

{
  items && items.length > 0 && (
    <div class={containerClass}>
      {items.map(({ title, description, icon, classes: itemClasses = {} }, index = 0) => {
        const colorScheme = colorSchemes[index % colorSchemes.length];

        return (
          <div
            class={twMerge(
              'flex intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade',
              panelClass,
              itemClasses?.panel
            )}
          >
            <div class="flex flex-col items-center mr-4 rtl:mr-0 rtl:ml-4">
              <div>
                <div class="flex items-center justify-center">
                  {(icon || defaultIcon) && (
                    <div class="relative">
                      {/* Efecto de resplandor de fondo */}
                      <div
                        class={`absolute inset-0 bg-gradient-to-br ${colorScheme.icon} rounded-full blur-sm opacity-20`}
                      />
                      {/* Icono principal con gradiente */}
                      <div
                        class={`relative w-10 h-10 bg-gradient-to-br ${colorScheme.icon} rounded-full flex items-center justify-center shadow-lg border-2 ${colorScheme.border}`}
                      >
                        <Icon
                          name={icon || defaultIcon}
                          class={twMerge('w-5 h-5 text-white', defaultIconClass, itemClasses?.icon)}
                        />
                      </div>
                    </div>
                  )}
                </div>
              </div>
              {index !== items.length - 1 && (
                <div class={`w-px h-full bg-gradient-to-b ${colorScheme.line} opacity-50`} />
              )}
            </div>
            <div class={`pt-1 ${index !== items.length - 1 ? 'pb-8' : ''}`}>
              {title && (
                <div class="mb-2">
                  <p
                    class={twMerge(`text-xl font-bold ${colorScheme.text}`, titleClass, itemClasses?.title)}
                    set:html={title}
                  />
                  {/* Línea decorativa */}
                  <div class={`w-8 h-0.5 bg-gradient-to-r ${colorScheme.line} mt-1`} />
                </div>
              )}
              {description && (
                <p
                  class={twMerge(
                    'text-muted mt-2 text-gray-600 dark:text-gray-300',
                    descriptionClass,
                    itemClasses?.description
                  )}
                  set:html={description}
                />
              )}
            </div>
          </div>
        );
      })}
    </div>
  )
}
