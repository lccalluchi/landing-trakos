---
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import type { ItemGrid as Props } from '~/types';
import Button from './Button.astro';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = '',
  action: actionClass = '',
} = classes;

// Esquemas de colores profesionales
const colorSchemes = [
  {
    bg: 'from-slate-50 to-white',
    border: 'border-slate-200',
    icon: 'from-blue-500 to-blue-600',
    iconGlow: 'from-blue-500/20 to-blue-600/20',
    text: 'text-slate-700',
    accent: 'text-blue-600',
    hover: 'hover:border-blue-300',
  },
  {
    bg: 'from-slate-50 to-white',
    border: 'border-slate-200',
    icon: 'from-emerald-500 to-emerald-600',
    iconGlow: 'from-emerald-500/20 to-emerald-600/20',
    text: 'text-slate-700',
    accent: 'text-emerald-600',
    hover: 'hover:border-emerald-300',
  },
  {
    bg: 'from-slate-50 to-white',
    border: 'border-slate-200',
    icon: 'from-purple-500 to-purple-600',
    iconGlow: 'from-purple-500/20 to-purple-600/20',
    text: 'text-slate-700',
    accent: 'text-purple-600',
    hover: 'hover:border-purple-300',
  },
  {
    bg: 'from-slate-50 to-white',
    border: 'border-slate-200',
    icon: 'from-orange-500 to-orange-600',
    iconGlow: 'from-orange-500/20 to-orange-600/20',
    text: 'text-slate-700',
    accent: 'text-orange-600',
    hover: 'hover:border-orange-300',
  },
];
---

{
  items && items.length > 0 && (
    <div
      class={twMerge(
        `grid mx-auto gap-6 md:gap-8 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-2 sm:grid-cols-1'
            : columns === 3
              ? 'lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-1'
              : columns === 2
                ? 'lg:grid-cols-2 sm:grid-cols-1'
                : 'grid-cols-1'
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, icon, callToAction, classes: itemClasses = {} }, index) => {
        const colorScheme = colorSchemes[index % colorSchemes.length];

        return (
          <div class="intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
            <div
              class={twMerge(
                `group relative h-full bg-gradient-to-br ${colorScheme.bg} rounded-2xl p-6 border-2 ${colorScheme.border} ${colorScheme.hover} shadow-sm hover:shadow-lg transition-shadow duration-300`,
                panelClass,
                itemClasses?.panel
              )}
            >
              {/* Decoración de fondo sutil */}
              <div class="absolute top-0 right-0 w-24 h-24 opacity-5 overflow-hidden rounded-2xl">
                <div class={`w-full h-full bg-gradient-to-br ${colorScheme.icon} transform rotate-12 scale-150`} />
              </div>

              {/* Layout horizontal: icono al lado del contenido */}
              <div class="relative z-10 flex items-start gap-4">
                {/* Contenedor del icono más pequeño y sin animaciones */}
                {(icon || defaultIcon) && (
                  <div class="flex-shrink-0">
                    <div class="relative">
                      {/* Efecto de resplandor estático */}
                      <div
                        class={`absolute inset-0 bg-gradient-to-br ${colorScheme.iconGlow} rounded-lg blur-md opacity-25`}
                      />
                      {/* Icono principal más pequeño y estático */}
                      <div
                        class={`relative w-10 h-10 bg-gradient-to-br ${colorScheme.icon} rounded-lg flex items-center justify-center shadow-sm`}
                      >
                        <Icon
                          name={icon || defaultIcon}
                          class={twMerge('w-5 h-5 text-white', defaultIconClass, itemClasses?.icon)}
                        />
                      </div>
                    </div>
                  </div>
                )}

                {/* Contenido con tipografía más pequeña */}
                <div class="flex-1 min-w-0">
                  {title && (
                    <div class="mb-2">
                      <h3
                        class={twMerge(
                          `text-lg font-semibold ${colorScheme.text} leading-tight`,
                          titleClass,
                          itemClasses?.title
                        )}
                      >
                        {title}
                      </h3>
                    </div>
                  )}

                  {description && (
                    <div class="mb-3">
                      <p
                        class={twMerge(
                          `${colorScheme.text} leading-relaxed text-sm opacity-75`,
                          descriptionClass,
                          itemClasses?.description
                        )}
                        set:html={description}
                      />
                    </div>
                  )}

                  {callToAction && (
                    <div class={twMerge('', actionClass, itemClasses?.actionClass)}>
                      <Button
                        variant="link"
                        {...callToAction}
                        class={`${colorScheme.accent} hover:opacity-70 font-medium transition-opacity duration-300 text-sm inline-flex items-center`}
                      >
                        {callToAction.text}
                        <Icon name="tabler:arrow-right" class="w-3 h-3 ml-1 text-white" />
                      </Button>
                    </div>
                  )}
                </div>
              </div>

              {/* Indicador de hover más sutil */}
              <div
                class={`absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r ${colorScheme.icon} rounded-b-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300`}
              />
            </div>
          </div>
        );
      })}
    </div>
  )
}
